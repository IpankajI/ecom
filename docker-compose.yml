services:
  postgres:
    image: postgres:14.18-bookworm
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
      - PGUSER=root
      - POSTGRES_MULTIPLE_DATABASES=inventory,order,payment,user,sonar
    ports:
      - "5432:5432"
    networks:
      - ecom-network
    volumes:
      - ./tmp/postgres-data:/var/lib/postgresql/data
      - ./docker-postgresql-multiple-databases:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh"]
      interval: 1s
      timeout: 5s
      retries: 5
      start_period: 10s
  queue:
    image: localstack/localstack
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    networks:
      - ecom-network
    volumes:
      - ./tmp/queue:/var/run/docker.sock
  mongo:
    image: mongodb/mongodb-community-server:6.0.19-ubi8
    ports:
      - "27017:27017"
    networks:
      - ecom-network
    volumes:
      - ./tmp/mongo/data/db:/data/db
  registry-server:
    build:
      context: registry-server
      dockerfile: Dockerfile
    networks:
      - ecom-network
    depends_on:
      - postgres
    volumes:
      - ./registry-server:/app
  api-gateway:
    build:
      context: api-gateway
      dockerfile: Dockerfile
    environment:
      PUBLIC_KEY: |
        -----BEGIN PUBLIC KEY-----
        MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvIi2+Ow/Vg0F7FTOSYfn
        tCeJ1W2feFEz2tOvCF68JZkGCaGBK7YDGiEohIItPV+ETovy1bGEjqFIv1w/VQnM
        +VyKgP48j1W5EgXRYAj9YgPMnpcBNWaThg6tEmRUa6YqLL3e7OT3v3+eQdwQYfb1
        5JsW390zkjfJAfDOcP+sr1BAvAiH0016a2beQZOqMbXFPBk01ve2aVmhq84c8g9k
        w48GlRrGzbqcrGRyk73TzFgoW4+f/2hCI8eQvWnMheVgTG7iCyJ6DuAwvsLH1nYC
        WfLXv/7lAtMAuQNzysQGbgbS8rosXb6THbNKCiAbnA+ZxNb3/wduronmANHCybGt
        eQIDAQAB
        -----END PUBLIC KEY-----

      PRIVATE_KEY: |
        -----BEGIN PRIVATE KEY-----
        MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC8iLb47D9WDQXs
        VM5Jh+e0J4nVbZ94UTPa068IXrwlmQYJoYErtgMaISiEgi09X4ROi/LVsYSOoUi/
        XD9VCcz5XIqA/jyPVbkSBdFgCP1iA8yelwE1ZpOGDq0SZFRrpiosvd7s5Pe/f55B
        3BBh9vXkmxbf3TOSN8kB8M5w/6yvUEC8CIfTTXprZt5Bk6oxtcU8GTTW97ZpWaGr
        zhzyD2TDjwaVGsbNupysZHKTvdPMWChbj5//aEIjx5C9acyF5WBMbuILInoO4DC+
        wsfWdgJZ8te//uUC0wC5A3PKxAZuBtLyuixdvpMds0oKIBucD5nE1vf/B26uieYA
        0cLJsa15AgMBAAECggEAAqaOhVOB28iv3cxXp61UMQCa298j2OBARnBgcqb0iams
        ClYROZAneZD1cV8ItpHKYQQaILxvyvAAjXChoU/wBIWzRXdUr9tsLLvb31R/P3jp
        3mGXOO0IGO6QqugHMrR42eC81XF1GKz5QXSP+4NGuvU6kbYoJ0pG71niE1ugakj9
        Kq+Af6W5b3OqRjI1PDUExxOXRUGNhpje0IaqdyBxXzIgX+VUGXXtHhIRmH52GQPh
        1EmlckXHDO6d44WqoVcoZTBrRyVmANIGl6DLysOnOmD8m2foTQuS8Mo336MkZyYL
        TyEO8vwsKA9CcT2TqrU3jx1cNTleFWJ6OUeIOv/YUwKBgQDB6N0Up3p+c9krruIO
        vOCoPt9j66a6ZeIa5zBD3xy6qWwfcgZPfgcbl34TIKlXhNyx5cJZkRWXzBZc13YB
        eXXVcTBzr709CM49P8lOjTiNHC4wnav7DnUiJV1uhtmLxzePSUIbeQ9Q/6hzXNcb
        DehL2Mh2OG/a3mBtvZ3F+xlFowKBgQD45zRh23NaWm/n3VCJRBP0uNYRNHAOI72k
        6We3srOMbVmuCNBVoKtdBl6Z4wjGdDhoQi0sZezqoq2n74XBqWnL7eU45pdgzfAn
        60FxAuJb5wmTryOflVlJ/B57LARmWaF2jSp+4CTC5ORfWA9If7UJktSMkp1jagHo
        s5SglfTaMwKBgE+h8/jhdpqrtMoNveRTiOdPOqpsQkJWSO7HdrjIzaGSpkabqx/G
        H+Ei67GrPiAk/gVI1/G0dWurcpuaGGoumUeYfk9kIpEIJrpcka1irZC1u/pXJiOq
        Ikxtj9suIfUXUSfU7AMgSjv3YhROUkBYC8fqNRjnwHffzzYCIuMFZbGFAoGAKpMR
        qLNq1cemYJjAj9ovN6ruIt8/U4vVgoHSFd/hSmHh9xzW1e63oR/XyqbE930lsN+w
        7mk4zyGoZpNX47pguFsm3EbFGe/f5lQdS4Fcyq+IOdS5WTCopzkS1aq/zeoC7k5T
        OISKhTO1xIFBi/scMlkFNk5V0Y1uaildgOJlkXUCgYACgMoWJ8sSYYXoyDq6Zhbc
        R1lLdq5elYI6PWSIfdMtvdFNg7KvAEMoLOEXEpBPPbxY15NSg/F+TLtLd4b0qy5v
        N0LaJbj/tatVn78GTaHeOCmO6TYpFrB1Lk+qREkjY4oMBoRm2af34c4OOcQR8yQd
        S4MmT8BtwvnL6H1C3h9/oA==
        -----END PRIVATE KEY-----

      AUTH0_CLIENT_ID: zyzmHGAIj0TmCOd6vqHcyKQScLjbnMMT
      AUTH0_CLIENT_SECRET: e72mF1wmapJd0Gnp-xqBSGKLUzflw7IlHoZlq12jBzoVmooa6Pw_Qk7jQNkLvwoh
      TWILIO_USERNAME: AC01a36273ee4e957e5d1a20283eb4cd68
      TWILIO_PASSWORD: 3b777d44e45e5aae70c692c2e349e9af

    ports:
      - "8080:8080"
    networks:
      - ecom-network
    depends_on:
      - postgres
    volumes:
      - ./api-gateway:/app
  event-handler:
    build:
      context: event-handler
      dockerfile: Dockerfile
    networks:
      - ecom-network
    depends_on:
      - postgres
    volumes:
      - ./event-handler:/app
  inventory-service:
    build:
      context: inventory-service
      dockerfile: Dockerfile
    networks:
      - ecom-network
    depends_on:
      - postgres
      - sonarqube
      - registry-server
    volumes:
      - ./inventory-service:/app
  order-service:
    build:
      context: order-service
      dockerfile: Dockerfile
    networks:
      - ecom-network
    depends_on:
      - postgres
      - registry-server
    volumes:
      - ./order-service:/app
  payment-service:
    build:
      context: payment-service
      dockerfile: Dockerfile
    networks:
      - ecom-network
    depends_on:
      - postgres
      - registry-server
    volumes:
      - ./payment-service:/app
  product-service:
    build:
      context: product-service
      dockerfile: Dockerfile
    networks:
      - ecom-network
    depends_on:
      - postgres
      - registry-server
    volumes:
      - ./product-service:/app
  user-service:
    build:
      context: user-service
      dockerfile: Dockerfile
    networks:
      - ecom-network
    depends_on:
      - postgres
      - registry-server
    volumes:
      - ./user-service:/app

  sonarqube:
    image: sonarqube:community
    ports:
      - "9000:9000"
    depends_on:
      - postgres
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar
      SONAR_JDBC_USERNAME: root
      SONAR_JDBC_PASSWORD: password
    volumes:
      - ./tmp/sonarqube_data:/opt/sonarqube/data
      - ./tmp/sonarqube_extensions:/opt/sonarqube/extensions
      - ./tmp/sq-logs:/opt/sonarqube/logs
    networks:
      - ecom-network
networks:
  ecom-network:
    driver: bridge

volumes:
  postgres-s-data: